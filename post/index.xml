<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 猫名上和</title>
    <link>/post/</link>
    <description>Recent content in Posts on 猫名上和</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©2020 cal.</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 17:06:07 +0800</lastBuildDate>
    
        <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>5G-1</title>
      <link>/post/5g/5g_1/</link>
      <pubDate>Sun, 15 Mar 2020 17:06:07 +0800</pubDate>
      
      <guid>/post/5g/5g_1/</guid>
      <description>课程连接 5G愿景 愿景.png 三个基础指标 eMBB 峰值10GBps ：VR，AR，MR mMTC 1000,000连接/平方公里 : 物联网 uRLLC 1ms 延迟 : 车联网 3GPP r15 标准</description>
      
    </item>
    
    <item>
      <title>MAC安装GoLang</title>
      <link>/post/go/goinstall/</link>
      <pubDate>Sun, 15 Mar 2020 17:06:07 +0800</pubDate>
      
      <guid>/post/go/goinstall/</guid>
      <description>参考连接 官网安装 官网地址 brew 安装 `brew install go` 安装地址为 `/usr/local/go` 环境配置 # GO export PATH=$HOME/go/bin:$PATH export GOROOT=/usr/local/go export GOPATH=$HOME/go 测试 mkdir -p $HOME/go/src/hello hello.go package main import &amp;#34;fmt&amp;#34; func main() { fmt.Printf(&amp;#34;hello, world\n&amp;#34;) } - `go build` 在该hello.go文件目录下</description>
      
    </item>
    
    <item>
      <title>基于docker的gitlab迁移</title>
      <link>/post/cicd/gitlab/</link>
      <pubDate>Sun, 15 Mar 2020 17:06:04 +0800</pubDate>
      
      <guid>/post/cicd/gitlab/</guid>
      <description>基于docker的gitlab服务，最低要求为2核4G，最好配上2G的swap。 前期使用的阿里云服务器即将到期，服务器需要整体迁移到华为云同</description>
      
    </item>
    
    <item>
      <title>org-agenda</title>
      <link>/post/orgmode/org-agenda/</link>
      <pubDate>Thu, 27 Feb 2020 09:41:00 +0800</pubDate>
      
      <guid>/post/orgmode/org-agenda/</guid>
      <description>设置任务阶段 #+SEQ_TODO: TODO(T!) | DONE(D@) CANCELED(C@/!) ;; C-c C-c 启动 ;;C-c C-t 打开选项 ;;!: 自动增加时间戳 ;;@: 需要增加说明 ;;|: 分割完成和未完成的状态 快捷键 快捷键 说明｜ C-c . 创建时间戳 C-u C-c . 插入</description>
      
    </item>
    
    <item>
      <title>科学上网</title>
      <link>/post/tools/v2ray/</link>
      <pubDate>Tue, 25 Feb 2020 13:41:00 +0800</pubDate>
      
      <guid>/post/tools/v2ray/</guid>
      <description>参考 下载服务端并且 更改服务器时间，与客户端时区一致 cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime wget https://install.direct/go.sh # 下载脚本 bash go.sh # 执行安装 sudo systemctl start v2ray # 启动 如果你按照上面的命令执行安装完成之后，服务</description>
      
    </item>
    
    <item>
      <title>Centos 安装 cquery</title>
      <link>/post/emacs/cquery_centos/</link>
      <pubDate>Sat, 22 Feb 2020 16:36:00 +0800</pubDate>
      
      <guid>/post/emacs/cquery_centos/</guid>
      <description>安装cmake（可选） wget https://cmake.org/files/v3.12/cmake-3.12.0-rc1.tar.gz tar -zxvf cmake-3.12.0-rc1.tar.gz cd cmake-3.12.0-rc1 ./bootstrap gmake gmake install Building git clone --recursive https://github.com/cquery-project/cquery.git cd cquery git submodule update --init mkdir build &amp;amp;&amp;amp; cd build cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES cmake --build . cmake --build . --target install # Change the -DCMAKE_INSTALL_PREFIX=&amp;lt;dir to your choice&amp;gt; to install the binary to a place you want. 错误一</description>
      
    </item>
    
    <item>
      <title>MAC配置lsp-cquery</title>
      <link>/post/emacs/cquery/</link>
      <pubDate>Sat, 22 Feb 2020 16:36:00 +0800</pubDate>
      
      <guid>/post/emacs/cquery/</guid>
      <description>安装 brew install cquery EMACS-C CQuery ;; (setq cquery-executable &amp;#34;/path/to/cquery/build/release/bin/cquery&amp;#34;) (with-eval-after-load &amp;#39;projectile (setq projectile-project-root-files-top-down-recurring (append &amp;#39;(&amp;#34;compile_commands.json&amp;#34; &amp;#34;.cquery&amp;#34;) projectile-project-root-files-top-down-recurring))) (defun cquery//enable () (condition-case nil (lsp) (user-error nil))) (use-package cquery :commands lsp :init (add-hook &amp;#39;c-mode-hook #&amp;#39;cquery//enable) (add-hook &amp;#39;c++-mode-hook #&amp;#39;cquery//enable)) ;; Also see lsp-project-whitelist lsp-project-blacklist cquery-root-matchers (setq cquery-extra-init-params &amp;#39;(:index (:comments 2) :cacheFormat &amp;#34;msgpack&amp;#34; :completion (:detailedLabel t))) (setq lsp-ui-doc-include-signature nil) ; don&amp;#39;t include type signature in the child frame (setq lsp-ui-sideline-show-symbol nil) ;</description>
      
    </item>
    
    <item>
      <title>人工智能</title>
      <link>/post/ai/ai%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 21 Feb 2020 15:55:00 +0800</pubDate>
      
      <guid>/post/ai/ai%E5%9F%BA%E7%A1%80/</guid>
      <description>主流语言：Python 数学基础： 微积分 线性代数 概率论 一定的英语阅读能力 机器学习 理论模型 线性模型 LR SVM 贝叶斯 决策树 集成模型：GBDT，随机森林，</description>
      
    </item>
    
    <item>
      <title>Go-Emacs配置</title>
      <link>/post/go/go_emacs/</link>
      <pubDate>Wed, 19 Feb 2020 19:38:00 +0800</pubDate>
      
      <guid>/post/go/go_emacs/</guid>
      <description>配置go module 开启module &amp;amp; 设置代理 export GO111MODULE=on export GOPROXY=https://goproxy.cn # 或者 goproxy.io 下载支持三方库 go get golang.org/x/tools/cmd/goimports go get golang.org/x/tools/cmd/godoc go get github.com/rogpeppe/godef go get golang.org/x/tools/cmd/guru go get golang.org/x/lint/golint go get github.com/nsf/gocode go get golang.org/x/tools/cmd/gorename 配置emacs (use-package go-mode :ensure t :mode ((&amp;#34;\\.go\\&amp;#39;&amp;#34; . go-mode)) :hook</description>
      
    </item>
    
    <item>
      <title>easy-mock</title>
      <link>/post/mock/easy-mock/</link>
      <pubDate>Fri, 14 Feb 2020 13:56:00 +0800</pubDate>
      
      <guid>/post/mock/easy-mock/</guid>
      <description>安装 easy-mock-github nvm :node版本要求为v8.9.1 docker安装mongo docker pull mongo docker run -itd --name mongo -p 27017:27017 mongo docker安装redis docker pull redis docker run -itd --name redis -p 6379:6379 redis docker 安</description>
      
    </item>
    
  </channel>
</rss>
